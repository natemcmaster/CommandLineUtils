<Project>
  <PropertyGroup>
    <PackageReleaseNotes Condition="$(VersionPrefix.StartsWith('4.0.'))">
Changes since 3.1.0:

Features:

* @scott-xu and @natemcmaster: feature: add API for setting default value on options and arguments, and display them in help text (#389 and #420)
* @natemcmaster: cleanup: make .Values read-only on CommandArgument/Option (#406)
* @natemcmaster: Make options, arguments, and commands read-only collections on CommandLineApplication (#407)

Fixes:

* @natemcmaster: fix: pass the generic argument version in callback on .Option() and Argument() (#405)
* @natemcmaster: add .NET Standard 2.1 and fix nullable type references (#424 and #425)
* @natemcmaster: fix new CI to correctly publish symbols to nuget.org
* @scott-xu: show option types in help text when OptionAttribute.Template is set (#429)
* @skirchner989: change to not throw when a validator is not of type AttributeValidator (#431)
* @natemcmaster: don't mask OperationCanceledException triggered by SIGINT (#483)

Updates in 4.0.1 patch:
* @xoofx: use explicit constructors on validation attributes to workaround .NET 6 runtime trimming error (#491)
* @jakubqwe: support the Description field of VersionOptionFromMemberAttribute (#490)

Update in 4.0.2 patch:
* @ernstc: bugfix: added check on the model type before it proceeds accessing the property (#519)
    </PackageReleaseNotes>
    <PackageReleaseNotes Condition="$(VersionPrefix.StartsWith('3.1.'))">
Improvements:
* @scott-xu: Show allowed values in help text (#369)

Bug fixes:
* @natemcmaster: ensure clustering options is detected correctly when subcommands added via AddSubcommand (#393)
* @scott-xu: make UnrecognizedArgumentHandling per command scope (#371)
* @scott-xu: show allowed values in help text correctly when multiple AllowedValuesAttribute are used (#375)
* @scott-xu: show allowed values in help text for Nullable/ValueTuple&lt;bool,T&gt; option/argument (#390)
* @scott-xu: update help text to show allowed values from AllowedValues attribute instead of Enum values (#391)

Docs:
* @chaami: Fix Readme.md on Prompt.GetYesNo (#402)
* @cuperman007 docs: added using statements to code sample in index.md (#384)
* @scott-xu: Fix broken links in docs (#377)
* @scott-xu: cleanup: add a period to end sentences for built-in descriptions (#364)

Other:
* @natemcmaster: Stop code signing binaries and packages (#379)
* @natemcmaster: Change default project branch to 'main' (#373)
* @natemcmaster: add dotnet-format to CI, and other code/project file cleanups
    </PackageReleaseNotes>
    <PackageReleaseNotes Condition="$(VersionPrefix.StartsWith('3.0.'))">
Improvements:
* @AlexeyEvlampiev - implement support for GUID command line options (#333) and any other type that TypeConverter supports (#62)
* @natemcmaster - Disabled the pager for help text by default. To re-enable, set UsePagerForHelpText = true. (#346)
* @natemcmaster - Fix PlatformNotSupportedException on Xamarin of macOS (#344)

Breaking changes:
* Fix #251 by @mattnischan - remove API that was marked as obsolete in 2.x releases
* Fix #294 by @natemcmaster - change dependencies on McMaster.Extensions.Hosting.CommandLine to just use Microsoft.Extensions.Hosting.Abstractions
* Fix #337 by @natemcmaster - removed .NET Standard 1.6 target from library

See https://natemcmaster.github.io/CommandLineUtils/v3.0/upgrade-guide.html for more details.
    </PackageReleaseNotes>
    <PackageReleaseNotes Condition="$(VersionPrefix.StartsWith('2.6.'))">
The refactor-prep release.

The purpose of this release is to introduce new API and obsolete existing API. Obsolete API still works as expected,
but you will get compiler warnings about what is going to change in 3.0.

Changes:
* throwOnUnexpectedArg deprecated in favor of UnrecognizedArgumentHandling
    </PackageReleaseNotes>
    <PackageReleaseNotes Condition="$(VersionPrefix.StartsWith('2.5.'))">
Features and bug fixes:

* @kbilsted: Show enum names in help text for Options and Arguments stored as enum
* @Alxandr: Add support for private base type options
* @AndreGleichner: Update generated help to display [command] first then [options]
* @daveMueller: Fix generated help to display the help options correctly

Patch 2.5.1:
* Lazy load command object types to reduce unnecessary allocations
    </PackageReleaseNotes>
    <PackageReleaseNotes Condition="$(VersionPrefix.StartsWith('2.4.'))">
Features and bug fixes by some awesome contributors:

* @IanG: Attributes for files and directories that must not exist
* @ejball: ArgumentEscaper should escape empty string
* @vpkopylov: Use Pager for help text option only works on top-level help
* @vpkopylov: Add check for subcommand cycle
* @kyle-rader: Multi-line option descriptions do not indent correctly

Other things I fixed:
* Support C# 8.0 and nullable reference types
* Add async methods to CommandLineApplication
* Make `CommandLineApplication.ExecuteAsync` actually asynchronous
* Add async methods that accept cancellation tokens
* Handle CTRL+C by default
* Support calling CommandLineApplication.Execute multiple times
    </PackageReleaseNotes>
    <PackageReleaseNotes Condition="'$(VersionPrefix)' == '2.4.4'">
$(PackageReleaseNotes)

2.4.4 patch:
* Fix regression introduced in 2.4.2 which caused Ctrl+C handling not to terminate the process quickly
    </PackageReleaseNotes>
    <PackageReleaseNotes Condition="'$(VersionPrefix)' == '2.4.3'">
$(PackageReleaseNotes)

2.4.3 patch:
* Fix deadlock when calling Environment.Exit()
    </PackageReleaseNotes>
    <PackageReleaseNotes Condition="'$(VersionPrefix)' == '2.4.2'">
$(PackageReleaseNotes)

2.4.2 hot fix:
* Fix deadlock in CTRL+C handling on Windows
    </PackageReleaseNotes>
    <PackageReleaseNotes Condition="'$(VersionPrefix)' == '2.4.1'">
$(PackageReleaseNotes)

2.4.1 hot fix:
* Workaround a bizarre NuGet bug which causes problems for users in Europe and Asia
  (see https://github.com/NuGet/Home/issues/8603)
    </PackageReleaseNotes>

    <PackageReleaseNotes Condition="'$(VersionPrefix)' == '2.3.4'">
Bugs fixed:
* Handle options with multiple characters in the short option name when only specified in a subcommand
* Rearrange the order that commands are listed in the USAGE block and list all the commands on the line
    </PackageReleaseNotes>

    <PackageReleaseNotes Condition="'$(VersionPrefix)' == '2.3.3'">
Enhancement:
* @mpipo: add an API to disable the pager for help text (CommandLineApplication.UsePagerForHelpText)
    </PackageReleaseNotes>

    <PackageReleaseNotes Condition="'$(VersionPrefix)' == '2.3.2'">
Enhancement:
* @rlvandaveer: honor attributes on classes which implement ValidationAttribute

Bugs fixed:
* @jcaillon: Option for the case sensitivity of command names.
    </PackageReleaseNotes>

    <PackageReleaseNotes Condition="'$(VersionPrefix)' == '2.3.1'">
Bugs fixed:
* Fix for InvalidOperationException thrown during help text generation on Mono
    </PackageReleaseNotes>

    <PackageReleaseNotes Condition="'$(VersionPrefix)' == '2.3.0'">
      <![CDATA[

## Enhancements:

* Support the POSIX convention for cluster multiple options. For example, `-ixd` is treated the same as `-i -x -d`.
* @bjorg: support SingleOrNoValue notation. `--option[:value]`
* New type: `Pager`. Provides a simple interaction model for displaying console output in a pager.
* Display help text using the `less` pager on macOS/Linux.
* Make suggestions when invalid options or commands are used, but there is a valid one that is similar. (Thanks to @MadbHatter for doing the initial work on this.)
* Add support for subcommand aliases. Commands can be given multiple names.
* Obsolete the constructor of `[Subcommand]` which takes a string.
* Infer subcommand names from the type name
* @lvermeulen: Sort subcommands by name in help text. This can be disabled with `DefaultHelpTextGenerator.SortCommandsByName`.
* @jcaillon: Add API for `UnrecognizedCommandParsingException` which includes suggestions for similar options or commands.
* @TheConstructor: add CommandLineApplication.GetValidationResult()

## Bugs fixed:

* Duplicate subcommand names used to cause undefined behavior. Now, attempting to add a duplicate subcommand name or aliases will cause the library to throw before the app can execute.
* Fix bug in subcommand name inference. When not specified, the subcommand always matched the entry assembly name. In this update, this convention only applies to the parent command.
* Add generic overloads of `.IsRequired()` for `CommandOption<T>` and `CommandArgument<T>`.
* @handcraftedsource: handled nested HelpOptions (fixes #86 - InvalidOperationException when multiple help options were defined)
]]>
    </PackageReleaseNotes>
    <PackageReleaseNotes>$(PackageReleaseNotes)

See more details here: https://github.com/natemcmaster/CommandLineUtils/blob/main/CHANGELOG.md#v$(VersionPrefix.Replace('.',''))
    </PackageReleaseNotes>
  </PropertyGroup>
</Project>
